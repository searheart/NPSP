/*
    Copyright (c) 2019 Salesforce.org
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Salesforce.org nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/
/**
* @author Salesforce.org
* @date 2019
* @group Recurring Donations
* @description Enhanced Recurring Donations trigger handler tests
*
*/
@isTest(IsParallel=true)
private with sharing class RD2_RecurringDonations_TEST {
    private static final TEST_SObjectGateway.RecurringDonationGateway rdGateway = new TEST_SObjectGateway.RecurringDonationGateway();
    private static final TEST_SObjectGateway.RecurringDonationScheduleGateway rdScheduleGateway = new TEST_SObjectGateway.RecurringDonationScheduleGateway();

    private static final Date DATE_ESTABLISHED = Date.newInstance(2019, 9, 15);

    /****
    * @description Creates data required for unit tests
    */
    @TestSetup
    private static void setUp() {
        Account acc = new Account(Name = 'RD2 Trigger Handler Account');
        insert acc;

        Contact contact = UTIL_UnitTestData_TEST.getContact();
        contact.AccountId = acc.Id;
        insert contact;
    }


    /***
    * @description Verifies name is autogenerated for recurring donations on insert
    */
    @isTest
    private static void shouldAutogenerateNameOnInsert() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c>{
            new TEST_RecurringDonationBuilder()
                .withContact(contact.Id)
                .withAmount(100)
                .withDefaultValues()
                .build(),
            new TEST_RecurringDonationBuilder()
                .withAccount(contact.AccountId)
                .withAmount(200)
                .withDefaultValues()
                .build()
        };

        Test.startTest();
        RD2_NamingService_TEST.enableAutomaticNaming();

        insert rds;
        Test.stopTest();

        Map<Id, npe03__Recurring_Donation__c> actualRdById = new Map<Id, npe03__Recurring_Donation__c>(
            rdGateway.getRecords(rds)
        );
        System.assertEquals(rds.size(), actualRdById.size(), 'Number of RDs should match');

        String rdName = actualRdById.get(rds[0].id).Name;
        System.assert(rdName.startsWith(contact.FirstName + ' ' + contact.LastName), 'Name should start with Contact name');
        System.assert(rdName.endsWith('100 - ' + System.Label.RecurringDonationNameSuffix), 'Name should contain amount value');

        rdName = actualRdById.get(rds[1].id).Name;
        System.assert(rdName.startsWith(contact.Account.Name), 'Name should start with Account name');
        System.assert(rdName.endsWith('200 - ' + System.Label.RecurringDonationNameSuffix), 'Name should contain amount value');
    }

    /***
    * @description Verifies name is autogenerated for recurring donations on update
    */
    @isTest
    private static void shouldAutogenerateNameOnUpdate() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = new TEST_RecurringDonationBuilder()
            .withAccount(contact.AccountId)
            .withAmount(100)
            .withDefaultValues()
            .build();
        String name = rd.Name;
        insert rd;

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(name, rd.Name, 'The name should be unchanged since Enable Automatic Naming is unchecked');

        Test.startTest();
        RD2_NamingService_TEST.enableAutomaticNaming();

        rd.npe03__Amount__c = 200;
        update rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assert(rd.Name.startsWith(contact.Account.Name), 'Name should start with Account name');
        System.assert(rd.Name.endsWith('200 - ' + System.Label.RecurringDonationNameSuffix), 'Name should contain amount value');
    }


    /****
    * @description Verifies integration dispatcher is called
    * when enhanced Recurring Donations are enabled
    */
    @isTest
    private static void shouldDispatchRDsToIntegrationGatewayOnBeforeDelete() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c> {
            new TEST_RecurringDonationBuilder()
                .withAccount(UTIL_UnitTestData_TEST.mockId(Account.SObjectType))
                .withAmount(100)
                .withId(UTIL_UnitTestData_TEST.mockId(npe03__Recurring_Donation__c.SObjectType))
                .build()
        };

        RD2_RecurringDonations_TDTM triggerHandler = new RD2_RecurringDonations_TDTM();
        UTIL_IntegrationGateway_TEST.Stub gatewayStub = new UTIL_IntegrationGateway_TEST.Stub();
        triggerHandler.integrationGateway = (UTIL_IntegrationGateway) Test.createStub(UTIL_IntegrationGateway.class, gatewayStub);

        Test.startTest();
        triggerHandler.run(
            null,
            rds,
            TDTM_Runnable.Action.BeforeDelete,
            npe03__Recurring_Donation__c.SObjectType.getDescribe()
        );
        Test.stopTest();

        System.assert(gatewayStub.paramsByMethodName.containsKey('handleBeforeDelete'),
            'handleBeforeDelete should have been called on the integration gateway');

        Map<String, Object> paramsForMethod = gatewayStub.paramsByMethodName.get('handleBeforeDelete');

        System.assertEquals(rds, paramsForMethod.get('triggerOld'),
            'The triggerOld parameter should contain the data from the oldList parameter');
    }

    /***
    * @description Verifies schedule is created when recurring donation is inserted
    */
    @isTest
    private static void shouldCreateNewRDScheduleOnInsert() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        List<npe03__Recurring_Donation__c> rds = new List<npe03__Recurring_Donation__c>{
            TEST_RecurringDonationBuilder.constructEnhancedBuilder()
                .withContact(contact.Id)
                .withAmount(10)
                .withInstallmentPeriodMonthly()
                .withInstallmentFrequency(1)
                .withDayOfMonth('20')
                .withDateEstablished(DATE_ESTABLISHED)
                .withStartDate(DATE_ESTABLISHED)
                .build()
        };

        Test.startTest();
        insert rds;
        Test.stopTest();

        Map<Id, npe03__Recurring_Donation__c> actualRdById = new Map<Id, npe03__Recurring_Donation__c>(rdGateway.getRecords(rds));
        System.assertEquals(rds.size(), actualRdById.size(), 'Number of RDs should match');

        List<RecurringDonationSchedule__c> rdSchedules = rdScheduleGateway.getRecords(rds);
        System.assertEquals(rds.size(), rdSchedules.size(), 'Number of RD schedule records should equal the number of RD records');

    }

    /***
    * @description Verifies a new schedule is created when recurring donation is updated
    */
    @isTest
    private static void shouldCreateNewRDScheduleOnUpdate() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(contact.Id)
            .withAmount(10)
            .withInstallmentPeriodMonthly()
            .withInstallmentFrequency(1)
            .withDayOfMonth('20')
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(DATE_ESTABLISHED)
            .build();

        Test.startTest();
        insert rd;
        rd.InstallmentFrequency__c = 3;
        update rd;
        Test.stopTest();

        Integer endedCount = 0;
        Integer frequency3Count = 0;
        List<RecurringDonationSchedule__c> rdSchedules = rdScheduleGateway.getRecords(rd);

        for (RecurringDonationSchedule__c schedule: rdSchedules) {
            if (schedule.EndDate__c != null) {
                endedCount++;
                System.assertEquals(1, schedule.InstallmentFrequency__c, 'Installment frequency should be 1');
            } else {
                System.assertEquals(3, schedule.InstallmentFrequency__c, 'Installment frequency should be 3');
            }
        }
        System.assertEquals(1, endedCount, 'End Date should be populated in 1 record');
        System.assertEquals(2, rdSchedules.size(), 'Number of RD schedule records should be 2');

    }

    /***
    * @description Verifies next donation date is calculated when recurring donation is inserted
    */
    @isTest
    private static void shouldCalculateNextDonationDateOnInsert() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(contact.Id)
            .withAmount(10)
            .withInstallmentPeriodWeekly()
            .withInstallmentFrequency(1)
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(Date.today())
            .build();

        Test.startTest();
        insert rd;
        Test.stopTest();

        npe03__Recurring_Donation__c rd2 = rdGateway.getRecord(rd.Id);
        System.assertEquals(Date.today(), rd2.npe03__Next_Payment_Date__c, 'Next Donation date should equal today');

    }

    /***
    * @description Verifies next donation date is calculated when recurring donation is updated
    */
    @isTest
    private static void shouldCalculateNextDonationDateOnUpdate() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(contact.Id)
            .withAmount(10)
            .withInstallmentPeriodWeekly()
            .withInstallmentFrequency(1)
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(DATE_ESTABLISHED)
            .build();

        Test.startTest();
        insert rd;
        rd.npe03__Installment_Period__c = RD2_Constants.INSTALLMENT_PERIOD_MONTHLY;
        rd.Day_of_Month__c = '20';
        update rd;
        Test.stopTest();

        npe03__Recurring_Donation__c rd2 = rdGateway.getRecord(rd.Id);
        System.assertEquals(rd2.npe03__Next_Payment_Date__c.day(), 20, 'Next Donation day should equal 20');

    }

    /***
    * @description Verifies next donation date is calculated on update from closed to lapsed
    */
    @isTest
    private static void shouldCalculateNextDonationDateOnUpdateFromClosedToLapsed() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(contact.Id)
            .withAmount(10)
            .withInstallmentPeriod(RD2_Constants.INSTALLMENT_PERIOD_DAILY)
            .withInstallmentFrequency(1)
            .withStatus(RD2_Constants.STATUS_CLOSED)
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(DATE_ESTABLISHED)
            .build();

        Test.startTest();
        insert rd;
        rd.Status__c = RD2_Constants.STATUS_LAPSED;
        update rd;
        Test.stopTest();

        npe03__Recurring_Donation__c rd2 = rdGateway.getRecord(rd.Id);
        System.assertEquals(Date.today(), rd2.npe03__Next_Payment_Date__c, 'Next donation date should be today()');

        List<RecurringDonationSchedule__c> rdSchedules = rdScheduleGateway.getRecords(rd);
        System.assertEquals(1, rdSchedules.size(), 'Should be 1 schedule');

    }

    /***
    * @description Verifies that start date is NOT updated to current date on updated RD when appropriate
    */
    @isTest
    private static void shouldNotOverrideStartDateWithCurrentDate() {
        final Date startDate = DATE_ESTABLISHED.addMonths(1);
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        Contact contact = getContact();

        npe03__Recurring_Donation__c rd = TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(contact.Id)
            .withAmount(50)
            .withInstallmentPeriod(RD2_Constants.INSTALLMENT_PERIOD_MONTHLY)
            .withDayOfMonth('10')
            .withInstallmentFrequency(1)
            .withStatus(RD2_Constants.STATUS_ACTIVE)
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(startDate)
            .build();

        Test.startTest();
        insert rd;
        rd.npe03__Amount__c = 100;
        rd.InstallmentFrequency__c = 2;
        update rd;
        Test.stopTest();

        List<RecurringDonationSchedule__c> rdSchedules = rdScheduleGateway.getRecords(rd);
        System.assertEquals(2, rdSchedules.size(), 'Should be 2 schedules');
        System.assertEquals(startDate, rdSchedules[0].StartDate__c, 'Original schedule Start Date should be unchanged');
        System.assertEquals(startDate, rdSchedules[1].StartDate__c, 'New schedule Start Date should be original schedule Start Date');
        System.assertEquals(startDate.addDays(-1), rdSchedules[0].EndDate__c, 'Original schedule End Date should be changed so the schedule is inactive');
        System.assertEquals(null, rdSchedules[1].EndDate__c, 'New schedule End Date should be undefined');
        System.assertEquals(50, rdSchedules[0].InstallmentAmount__c, 'Original amount should equal 50');
        System.assertEquals(100, rdSchedules[1].InstallmentAmount__c, 'Updated amount should equal 100');
    }

    /****
    * @description Validates start date on RD with empty current start date
    */
    @IsTest
    private static void shouldSetStartDateToCurrentDateIfStartDateEmpty() {
        Date startDate = Date.newInstance(2019, 11, 1);
        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withStartDate(startDate)
            .build();

        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        insert rd;
        Test.startTest();
        rd.npe03__Amount__c = 250;
        rd.StartDate__c = null;
        update rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(Date.today(), rd.StartDate__c, 'Next donation date should be today()');

        List<RecurringDonationSchedule__c> rdSchedules = rdScheduleGateway.getRecords(rd);
        System.assertEquals(2, rdSchedules.size(), 'Should be 2 schedules.');

        System.assertEquals(startDate, rdSchedules[0].StartDate__c, 'Original schedule start date should be same as start date on recurring donation.');
        System.assertEquals(Date.today().addDays(-1), rdSchedules[0].EndDate__c, 'Original schedule end date should be yesterday.');
        System.assertEquals(Date.today(), rdSchedules[1].StartDate__c, 'Updated schedule start date should be today.');
        System.assertEquals(null, rdSchedules[1].EndDate__c, 'Updated end date should be null.');
        System.assertEquals(100, rdSchedules[0].InstallmentAmount__c, 'Original amount should equal 100.');
        System.assertEquals(250, rdSchedules[1].InstallmentAmount__c, 'Updated amount should equal 250.');
    }

    /***
    * @description Verifies that future start date on updated RD is respected when appropriate
    */
    @isTest
    private static void shouldUseInputStartDateForFutureStartDate() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .build();

        Date newEffectiveDate = Date.today().addDays(15);

        Test.startTest();
        insert rd;

        rd.StartDate__c = newEffectiveDate;
        rd.npe03__Amount__c += 100;
        rd.InstallmentFrequency__c = 2;
        update rd;

        Test.stopTest();

        npe03__Recurring_Donation__c rd2 = rdGateway.getRecord(rd.Id);
        System.assertEquals(newEffectiveDate, rd2.StartDate__c, 'New Effective Date should be 15 days after today');
    }

    /***
    * @description Verifies that past start date on updated RD is respected when appropriate
    */
    @isTest
    private static void shouldUseInputStartDateForPastStartDate() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .build();

        Date newEffectiveDate = Date.today().addDays(-15);

        Test.startTest();
        insert rd;

        rd.StartDate__c = newEffectiveDate;
        rd.npe03__Amount__c += 100;
        rd.InstallmentFrequency__c = 2;
        update rd;

        Test.stopTest();

        npe03__Recurring_Donation__c rd2 = rdGateway.getRecord(rd.Id);
        System.assertEquals(newEffectiveDate, rd2.StartDate__c, 'New Effective Date should be 15 days before today');
    }

    /***
    * @description Verifies that no new RD schedule is created
    * when no relevant field for the schedule is updated on the RD
    */
    @isTest
    private static void shouldNotCreateNewRDScheduleOnUpdateWhenRelevantFieldIsUnchanged() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .build();

        Test.startTest();
        insert rd;

        Integer numSchedulesPreUpdate = rdScheduleGateway.getRecords(rd).size();
        rd.npe03__Date_Established__c = Date.today().addDays(15);
        update rd;

        Test.stopTest();

        System.assertEquals(numSchedulesPreUpdate, rdScheduleGateway.getRecords(rd).size(),
            'Number of schedules pre- and post-update should be equal');
    }

    /***
    * @description Verifies that when an Open Ended RD is created with a Number Of Planned Installments equal
    * to one, that the NumberOfPlannedInstallments field is changed to null
    */
    @isTest
    private static void shouldSetNumberOfPlannedInstallmentsToNullWhenOpenEnded() {
        final Integer plannedInstallments = 1;

        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withPlannedInstallments(plannedInstallments)
            .withRecurringTypeOpen()
            .build();

        Test.startTest();
        insert rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(null, rd.npe03__Installments__c,
            'The Number Of Planned Installments field should be null for an Open Ended RD');
    }

    /***
    * @description Verifies that when a Fixed Length RD is created with a NumberOfPlannedInstallments value
    * of one, that the value remains unchanged
    */
    @isTest
    private static void shouldNotChangeNumberOfPlannedInstallmentsWhenFixedLength() {
        final Integer plannedInstallments = 1;

        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withPlannedInstallments(plannedInstallments)
            .withRecurringTypeFixed()
            .build();

        Test.startTest();
        insert rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(1, rd.npe03__Installments__c,
            'The Number Of Planned Installments field should be unchanged');
    }

    /***
    * @description Verifies that when the Number of Paid Installments for a Fixed Length RD is modified,
    * but stil less than the NumberOfPlannedInstallments, that the RD Status remains as Active.
    */
    @isTest
    private static void shouldNotChangeFixedLengthRecurringDonationWhenNumberPaidInstallmentsChanged() {
        final Integer plannedInstallments = 5;

        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withPlannedInstallments(plannedInstallments)
            .withRecurringTypeFixed()
            .build();

        Test.startTest();
        insert rd;

        rd.npe03__Total_Paid_Installments__c = rd.npe03__Installments__c - 1;
        update rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(5, rd.npe03__Installments__c,
            'The Number Of Planned Installments field should be unchanged');
        System.assertEquals(RD2_Constants.STATUS_ACTIVE, rd.Status__c,
            'The RD Status should be Active');
    }

    /***
    * @description Verifies that when the Number of Paid Installments for a Fixed Length RD reaches
    * the same value as the Number of Planned Installments, that the RD is Closed
    */
    @isTest
    private static void shouldCloseFixedLengthRecurringDonationWhenReachNumberPlannedInstallments() {
        final Integer plannedInstallments = 5;

        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withPlannedInstallments(plannedInstallments)
            .withPaidInstallments(4)
            .withRecurringTypeFixed()
            .build();

        Test.startTest();
        insert rd;

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(RD2_Constants.STATUS_ACTIVE, rd.Status__c,
            'The RD Status should be Active');

        rd.npe03__Total_Paid_Installments__c = rd.npe03__Installments__c;
        update rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(5, rd.npe03__Installments__c,
            'The Number Of Planned Installments field should be unchanged');
        System.assertEquals(RD2_Constants.STATUS_CLOSED, rd.Status__c,
            'The RD Status should be Closed');
        System.assertEquals(RD2_Constants.FIXED_TYPE_CLOSED_REASON, rd.ClosedReason__c,
            'The RD ClosedReason field should be set to "' + RD2_Constants.FIXED_TYPE_CLOSED_REASON + '"');
    }

    /***
    * @description Verifies Installment Frequency should default to one when RD insert with null Installment Frequency
    */
    @isTest
    private static void shouldCreateRDWithDefaultInstallmentFrequencyWhenNull() {
        RD2_EnablementService_TEST.setRecurringDonations2Enabled();

        npe03__Recurring_Donation__c rd = getRecurringDonationMonthlyBuilder()
            .withInstallmentFrequency(null)
            .build();

        Test.startTest();
        insert rd;
        Test.stopTest();

        rd = rdGateway.getRecord(rd.Id);
        System.assertEquals(1, rd.InstallmentFrequency__c,
            'Installment Frequency should default to 1 when not specified on RD insert');
    }


    // Helpers
    ///////////////////

    /****
    * @description Returns Recurring Donation with Yearly Installment Period
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationYearlyBuilder() {
        return getRecurringDonationBaseBuilder()
            .withInstallmentPeriodYearly();
    }

    /****
    * @description Returns Recurring Donation with Monthly Installment Period
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationMonthlyBuilder() {
        return getRecurringDonationBaseBuilder()
            .withInstallmentPeriodMonthly()
            .withDayOfMonth('1');
    }

    /****
    * @description Returns Recurring Donation with Weekly Installment Period
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationWeeklyBuilder() {
        return getRecurringDonationBaseBuilder()
            .withInstallmentPeriodWeekly();
    }

    /****
    * @description Returns Recurring Donation with Daily Installment Period
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationDailyBuilder() {
        return getRecurringDonationBaseBuilder()
            .withInstallmentPeriod(RD2_Constants.INSTALLMENT_PERIOD_DAILY);
    }

    /****
    * @description Returns Recurring Donation with 1st and 15th Installment Period
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationFirstAndFifteenthBuilder() {
        return getRecurringDonationBaseBuilder()
            .withInstallmentPeriod(RD2_Constants.INSTALLMENT_PERIOD_FIRST_AND_FIFTEENTH);
    }

    /****
    * @description Returns Recurring Donation with default values
    */
    private static TEST_RecurringDonationBuilder getRecurringDonationBaseBuilder() {
        return TEST_RecurringDonationBuilder.constructEnhancedBuilder()
            .withContact(getContact().Id)
            .withAmount(100)
            .withPaymentMethod('Credit Card')
            .withInstallmentFrequency(1)
            .withDateEstablished(DATE_ESTABLISHED)
            .withStartDate(DATE_ESTABLISHED);
    }

    /****
    * @description Returns contact record
    * @return Contact
    */
    private static Contact getContact() {
        return [
            SELECT FirstName, LastName, AccountId, Account.Name
            FROM Contact
            LIMIT 1
        ];
    }

}